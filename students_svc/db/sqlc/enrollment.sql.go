// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: enrollment.sql

package db

import (
	"context"
)

const createEnrollment = `-- name: CreateEnrollment :one
INSERT INTO enrollments (
  student_id, course_id
) VALUES (
  $1, $2
)
RETURNING id, student_id, course_id, enrollment_date, created_at
`

type CreateEnrollmentParams struct {
	StudentID int64
	CourseID  int64
}

func (q *Queries) CreateEnrollment(ctx context.Context, arg CreateEnrollmentParams) (Enrollment, error) {
	row := q.db.QueryRowContext(ctx, createEnrollment, arg.StudentID, arg.CourseID)
	var i Enrollment
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.CourseID,
		&i.EnrollmentDate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEnrollment = `-- name: DeleteEnrollment :exec
DELETE FROM enrollments
WHERE id = $1
`

func (q *Queries) DeleteEnrollment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEnrollment, id)
	return err
}

const getEnrollment = `-- name: GetEnrollment :one
SELECT id, student_id, course_id, enrollment_date, created_at FROM enrollments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEnrollment(ctx context.Context, id int64) (Enrollment, error) {
	row := q.db.QueryRowContext(ctx, getEnrollment, id)
	var i Enrollment
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.CourseID,
		&i.EnrollmentDate,
		&i.CreatedAt,
	)
	return i, err
}

const getEnrollmentsByStudentID = `-- name: GetEnrollmentsByStudentID :many
SELECT id, student_id, course_id, enrollment_date, created_at FROM enrollments
WHERE student_id = $1 
ORDER BY id
LIMIT $2
OFFSET $3
`

type GetEnrollmentsByStudentIDParams struct {
	StudentID int64
	Limit     int32
	Offset    int32
}

func (q *Queries) GetEnrollmentsByStudentID(ctx context.Context, arg GetEnrollmentsByStudentIDParams) ([]Enrollment, error) {
	rows, err := q.db.QueryContext(ctx, getEnrollmentsByStudentID, arg.StudentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enrollment
	for rows.Next() {
		var i Enrollment
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.CourseID,
			&i.EnrollmentDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEnrollments = `-- name: ListEnrollments :many
SELECT id, student_id, course_id, enrollment_date, created_at FROM enrollments
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEnrollmentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListEnrollments(ctx context.Context, arg ListEnrollmentsParams) ([]Enrollment, error) {
	rows, err := q.db.QueryContext(ctx, listEnrollments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enrollment
	for rows.Next() {
		var i Enrollment
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.CourseID,
			&i.EnrollmentDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
