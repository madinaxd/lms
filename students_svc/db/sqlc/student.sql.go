// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: student.sql

package db

import (
	"context"
	"time"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
  fullname, date_of_birth, grade, phone
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, fullname, date_of_birth, grade, phone, created_at
`

type CreateStudentParams struct {
	Fullname    string
	DateOfBirth time.Time
	Grade       int32
	Phone       int64
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.Fullname,
		arg.DateOfBirth,
		arg.Grade,
		arg.Phone,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.DateOfBirth,
		&i.Grade,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students
WHERE id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, id)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT id, fullname, date_of_birth, grade, phone, created_at FROM students
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, id int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.DateOfBirth,
		&i.Grade,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const getStudentsByCourseID = `-- name: GetStudentsByCourseID :many
SELECT S.id, S.fullname, S.date_of_birth, S.grade, S.phone, S.created_at 
FROM enrollments as E
JOIN students as S
ON E.student_id = S.id
WHERE E.course_id = $1
LIMIT $2
OFFSET $3
`

type GetStudentsByCourseIDParams struct {
	CourseID int64
	Limit    int32
	Offset   int32
}

func (q *Queries) GetStudentsByCourseID(ctx context.Context, arg GetStudentsByCourseIDParams) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getStudentsByCourseID, arg.CourseID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.DateOfBirth,
			&i.Grade,
			&i.Phone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudents = `-- name: ListStudents :many
SELECT id, fullname, date_of_birth, grade, phone, created_at FROM students
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListStudentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListStudents(ctx context.Context, arg ListStudentsParams) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.DateOfBirth,
			&i.Grade,
			&i.Phone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE students
  set fullname = $2,
  date_of_birth = $3,
  grade = $4,
  phone = $5
WHERE id = $1
RETURNING id, fullname, date_of_birth, grade, phone, created_at
`

type UpdateStudentParams struct {
	ID          int64
	Fullname    string
	DateOfBirth time.Time
	Grade       int32
	Phone       int64
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudent,
		arg.ID,
		arg.Fullname,
		arg.DateOfBirth,
		arg.Grade,
		arg.Phone,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.DateOfBirth,
		&i.Grade,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}
