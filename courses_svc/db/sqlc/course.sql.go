// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: course.sql

package db

import (
	"context"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO Courses (
  name
) VALUES (
  $1
)
RETURNING id, name, created_at
`

func (q *Queries) CreateCourse(ctx context.Context, name string) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourse, name)
	var i Course
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM Courses
WHERE id = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCourse, id)
	return err
}

const getCourse = `-- name: GetCourse :one
SELECT id, name, created_at FROM Courses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCourse(ctx context.Context, id int64) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourse, id)
	var i Course
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT id, name, created_at FROM Courses
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCoursesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCourses(ctx context.Context, arg ListCoursesParams) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE Courses
  set name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateCourseParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, updateCourse, arg.ID, arg.Name)
	var i Course
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
